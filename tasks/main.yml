---

- name: repository key on xenial
  apt_key: 
    keyserver: keyserver.ubuntu.com 
    id: "0xF1656F24C74CD1D8"
  when: ansible_distribution_release == 'xenial'


- name: repository key on trusty and debian
  apt_key: 
    keyserver: keyserver.ubuntu.com
    id: "0xcbcb082a1bb943db"
  when: ansible_distribution_release == 'trusty' or ansible_distribution == 'Debian'


- name: add apt repository
  apt_repository: 
    repo: "deb http://mirror2.hs-esslingen.de/mariadb/repo/{{ galera_server_version }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} main" 
    filename: mariadb-galera-cluster
    state: present 
    update_cache: yes


- name: check bootstrapped
  stat: 
    path: /etc/mysql/galera_node_bootstrapped
  register: _galera_node_bootstrapped
  
  
- name: preseed galera root password
  shell: echo "{{ galera_server_package }} mysql-server/root_password password {{ galera_root_password }}" | debconf-set-selections ;
         echo "{{ galera_server_package }} mysql-server/root_password_again password {{ galera_root_password }}" | debconf-set-selections
    executable=/bin/bash
  when: _galera_node_bootstrapped.stat.exists == False


- name: install required packages
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: 3600
  with_items:
    - "{{ galera_server_package }}"
    - galera-3
    - rsync
    - python-mysqldb

  
- name: generate client config
  template: 
    src: my.cnf-root.j2
    dest: /root/.my.cnf
    owner: root 
    group: root
    mode: 0400
  tags:
  - root-cnf


- name: set debian-sys-maint password
  mysql_user: 
    name: debian-sys-maint 
    password: "{{ galera_sys_maint_password }}"
    host: localhost
    state: present 
    priv: "*.*:ALL"
  when: galera_manage_users and galera_bootstrap
 
  
- name: set clustercheck password
  mysql_user: 
    name: clustercheck
    password: "{{ galera_clustercheck_password }}"
    host: localhost
    state: present 
    priv: "*.*:PROCESS"
  when: galera_manage_users and galera_bootstrap


- name: set haproxy (control user) password
  shell:
    mysql -p{{ galera_root_password }} -uroot -e "USE mysql; INSERT IGNORE INTO user (Host,User) values ('{{ item }}','haproxy'); FLUSH PRIVILEGES;" 
  when: galera_manage_users and galera_haproxy_user
  with_items: "{{ galera_haproxy_hosts }}"
  changed_when: False
  

- name: debian configuration file
  template: 
    src: debian.cnf.j2 
    dest: /etc/mysql/debian.cnf 
    owner: root 
    group: root 
    mode: 0644
  notify: restart mysql 
  
    
- name: galera configuration file
  template: 
    src: cluster.cnf.j2 
    dest: /etc/mysql/conf.d/cluster.cnf 
    owner: root 
    group: root 
    mode: 0644
  notify: restart mysql 


- name: mariadb configuration file
  template: 
    src: my.cnf-default.j2 
    dest: /etc/mysql/my.cnf 
    owner: root 
    group: root 
    mode: 0644
  notify: restart mysql 


- name: set additional variables
  mysql_variables:
    login_user: root
    login_password: "{{ galera_root_password }}" 
    variable: "{{ item.split('=')[0]|trim }}"
    value: "{{ item.split('=')[1]|trim }}"
  tags:
  - variables
  with_items: "{{ galera_variables }}"
  when: not 'innodb_' in item
  
  
- name: persist additional variables
  template: 
    src: variables.cnf.j2
    dest: /etc/mysql/conf.d/variables.cnf
    owner: root 
    group: root 
    mode: 0644
  tags:
  - variables
  

# percona xtradb scripts
# and services
- name: install xinetd
  apt:
    pkg: xinetd
    state: present
    update_cache: yes
    cache_valid_time: 3600
  when: galera_check_scripts


- name: clustercheck shellscript
  template: 
    src: scripts/clustercheck.j2
    dest: /usr/local/bin/clustercheck
    owner: root 
    group: root 
    mode: 0755
  when: galera_check_scripts


- name: mysqlchk xinetd
  template: 
    src: scripts/mysqlchk.j2
    dest: /etc/xinetd.d/mysqlchk
    owner: root 
    group: root 
    mode: 0644
  when: galera_check_scripts
  notify: restart xinetd 


- name: add mysqlchk to /etc/services 
  lineinfile: 
    dest: /etc/services 
    regexp: '^mysqlchk ' 
    line: 'mysqlchk    {{ galera_check_scripts_port }}/tcp    # MySQL check' 
    owner: root 
    group: root 
    mode: 0644
  when: galera_check_scripts
  notify: restart xinetd 


# percona nagios plugins
- name: download nagios plugins
  get_url: 
    url: "{{ galera_nagios_plugins_src }}"
    dest: /tmp/
  register: _percona_nagios_download
  when: galera_nagios_plugins_version != False
  tags:
  - nagios-plugins
  check_mode: no


- name: create folder for plugins
  file:
    state: directory
    path: "/usr/lib/nagios/percona-plugins/"
  when: galera_nagios_plugins_version != False
  tags:
  - nagios-plugins


- name: unarchive downloaded plugins
  unarchive: 
    src: "{{ _percona_nagios_download.dest }}"
    dest: "/usr/lib/nagios/percona-plugins/"
    copy: no
  register: _percona_nagios_unarchive
  when: galera_nagios_plugins_version != False
  tags:
  - nagios-plugins


- name: create /usr/lib/nagios/plugins/
  file:
    path: "/usr/lib/nagios/plugins/"
    state: directory
  tags:
  - nagios-plugins


- name: copy plugins to default location
  shell: "cp -ar /usr/lib/nagios/percona-plugins/percona-monitoring-plugins-{{ galera_nagios_plugins_version }}/nagios/bin/* /usr/lib/nagios/plugins/"
  when: galera_nagios_plugins_version != False and _percona_nagios_unarchive.changed
  tags:
  - nagios-plugins  


- name: create /etc/nagios-plugins
  file:
    path: "/etc/nagios-plugins"
    state: directory
  tags:
  - nagios-plugins


- name: generate nagios config
  template: 
    src: my.cnf-nagios.j2
    dest: /etc/nagios-plugins/mysql.cnf
    owner: root 
    group: root
    mode: 0444
  tags:
  - nagios-plugins
  

# To bootstrap a new cluster you need to start the first 
# mysqld server with the option --wsrep-new-cluster on the command line 
- name: stop servers if not bootstrapped
  service:
    name: mysql
    state: stopped
  when: _galera_node_bootstrapped.stat.exists == False
  failed_when: False

   
- name: bootstrap new cluster master
  command: /etc/init.d/mysql bootstrap
  when: galera_bootstrap and _galera_node_bootstrapped.stat.exists == False


- name: restart new cluster master
  service:
    name: mysql
    state: restarted
  when: galera_bootstrap and _galera_node_bootstrapped.stat.exists == False


- name: restart new added nodes
  service:
    name: mysql
    state: restarted
  when: not galera_bootstrap and _galera_node_bootstrapped.stat.exists == False 


- name: create bootstrap file
  file: 
    path: /etc/mysql/galera_node_bootstrapped
    state: touch
  when: _galera_node_bootstrapped.stat.exists == False
 

# Add Timezone Support To MySQL
- name: check timezone support
  stat: 
    path: /etc/mysql/_galera_tzinfo_loaded
  register: _galera_tzinfo_loaded


- name: add timezone support to mysql
  shell: "mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql mysql && touch /etc/mysql/_galera_tzinfo_loaded"
  notify:
    - restart mysql
  when: galera_set_timezone_info is defined and galera_set_timezone_info and _galera_tzinfo_loaded.stat.exists == False and galera_bootstrap
